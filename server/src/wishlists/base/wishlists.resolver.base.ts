/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWishlistsArgs } from "./CreateWishlistsArgs";
import { UpdateWishlistsArgs } from "./UpdateWishlistsArgs";
import { DeleteWishlistsArgs } from "./DeleteWishlistsArgs";
import { WishlistsCountArgs } from "./WishlistsCountArgs";
import { WishlistsFindManyArgs } from "./WishlistsFindManyArgs";
import { WishlistsFindUniqueArgs } from "./WishlistsFindUniqueArgs";
import { Wishlists } from "./Wishlists";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { WishlistsService } from "../wishlists.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Wishlists)
export class WishlistsResolverBase {
  constructor(
    protected readonly service: WishlistsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "read",
    possession: "any",
  })
  async _wishlistsItemsMeta(
    @graphql.Args() args: WishlistsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Wishlists])
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "read",
    possession: "any",
  })
  async wishlistsItems(
    @graphql.Args() args: WishlistsFindManyArgs
  ): Promise<Wishlists[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Wishlists, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "read",
    possession: "own",
  })
  async wishlists(
    @graphql.Args() args: WishlistsFindUniqueArgs
  ): Promise<Wishlists | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wishlists)
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "create",
    possession: "any",
  })
  async createWishlists(
    @graphql.Args() args: CreateWishlistsArgs
  ): Promise<Wishlists> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        listing: {
          connect: args.data.listing,
        },

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wishlists)
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "update",
    possession: "any",
  })
  async updateWishlists(
    @graphql.Args() args: UpdateWishlistsArgs
  ): Promise<Wishlists | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          listing: {
            connect: args.data.listing,
          },

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wishlists)
  @nestAccessControl.UseRoles({
    resource: "Wishlists",
    action: "delete",
    possession: "any",
  })
  async deleteWishlists(
    @graphql.Args() args: DeleteWishlistsArgs
  ): Promise<Wishlists | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  @nestAccessControl.UseRoles({
    resource: "Listing",
    action: "read",
    possession: "any",
  })
  async resolveFieldListing(
    @graphql.Parent() parent: Wishlists
  ): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Wishlists
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
